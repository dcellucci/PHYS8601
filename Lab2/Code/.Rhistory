data<-read.csv(file="/home/daniel/Documents/proj/github/PHYS8601/Lab2/Code/25.csv")
data
x = data[,2]
x
x = data[,1]
y = data[,2]
plot(x,y)
plot(x,y, pch=3)
nlm(y = a*atan(x-b))
nlm(y~ a*atan(x-b))
lm(y~ a*atan(x-b))
a = 1.0
b = 0.5
c = 0.5
lm(y~ a*atan(x-b))
ag <- function(a,b,x) { a*atan(x-b) }
m = nlm(ag, 0.0, x=x)
m = nlm(ag, 1.0,0.5, x=x)
m = nlm(y~ag, 1.0,0.5, x=x)
m <- nls(y~a*atan(x-b), data=data, start=list(a = 1.0, b = 0.5))
summary(m)
points(x,m$fitted.values)
plot(x,y)
points(x,m$fitted.values)
points(x,m$fitted.values, pch=4)
m <- nls(y~a*atan(x-b)+c, data=data, start=list(a = 1.0, b = 0.5, c= 0.5))
summary(m)
points(x,m$fitted.values)
plot(x,y)
points(x,m$fitted.values, col='blue')
m <- nls(y~a*atan(d*x-b)+c, data=data, start=list(a = 1.0, b = 0.5, c= 0.5, d=10))
summary(m)
m <- nls(y~a*atan(d*x-b)+c, data=data, start=list(a = 1.0, b = 0.5, c= 0.5, d=1.0))
summary(m)
m <- nls(y~a*atan(d*x-b)+c, data=data, start=list(a = 1.0, b = 0.5, c= 0.5, d=0.001))
m <- nls(y~a*atan(d*x-b)+c, data=data, start=list(a = 1.0, b = 0.5, c= 0.5, d=0.01))
m <- nls(y~a*atan(d*x-b)+c, data=data, start=list(a = 0.5, b = 0.5, c= 0.5, d=0.01))
m <- nls(y~a*atan(d*x-b)+c, data=data, start=list(a = 0.5, b = 0.5, c= 0.5, d=10.0))
m <- nls(y~a*atan(d*x-b)+c, data=data, start=list(a = 0.5, b = 0.5, c= 0.5, d=1.0))
summary(m)
plot(x,y)
points(x,m$fitted.values, col='blue', pch=4)
points(x,x, col='blue', pch=4)
plot(x,y)
points(x,x, col='blue', pch=4)
plot(x,y)
plot(x,y)
close
plot(x,y)
q()
plot(x,y)
points(x,x, col='blue', pch=4)
points(x,m$fitted.values, col='blue', pch=4)
m <- nls(y~a*atan(d*x-b)+c, start=list(a = 0.5, b = 0.5, c= 0.5, d=1.0))
summary(m)
m <- nls(y~a*atan(d*x-b)+c, start=list(a = 0.5, b = 0.6, c= 0.4, d=1.0))
summary(m)
m <- nls(y~a*atan(d*x-b)+c, start=list(a = 0.5, b = 0.0, c= 0.4, d=1.0))
summary(m)
m <- nls(y~a*atan(d*x-b)+c, start=list(a = 0.01, b = 0.0, c= 0.4, d=1.0))
m <- nls(y~a*atan(d*x-b)+c, start=list(a = 0.1, b = 0.0, c= 0.4, d=1.0))
summary(m)
m <- nls(y~a*atan(d*(x-b))+c, start=list(a = 0.1, b = 0.0, c= 0.4, d=1.0))
m <- nls(y~a*atan(d*(x-b))+c, start=list(a = 0.1, b = 0.1, c= 0.4, d=1.0))
m <- nls(y~a*atan(d*(x-b))+c, start=list(a = 0.1, b = 0.5, c= 0.4, d=1.0))
m <- nls(y~a*atan(d*(x-b))+c, start=list(a = 0.1, b = 0.5, c= 0.4, d=0.5))
m <- nls(y~a*atan(d*(x-b))+c, start=list(a = 0.1, b = 0.5, c= 0.4, d=1.4))
summary(m)
points(x,m$fitted.values, col='red', pch=4)
m <- nls(y~a*atan(d*x-b), start=list(a = 0.1, b = 0.5, d=1.4))
m <- nls(y~a*atan(d*x-b), start=list(a = 0.5, b = 0.5, d=1.4))
m <- nls(y~a*atan(d*x-b)+c, start=list(a = 0.5, b = 0.5,c =0.0, d=1.4))
summary(m)
data<-read.csv(file="/home/daniel/Documents/proj/github/PHYS8601/Lab2/Code/50.csv")
q = data[,1]
r = data[,2]
m <- nls(q~a*atan(d*r-b), start=list(a = 0.5, b = 0.5, d=1.4))
m <- nls(q~a*atan(d*r-b), start=list(a = 0.5, b = 0.5, d=2.0))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.5, b = 0.5, c = 1.0, d=2.0))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.5, b = 0.5, c = 0.5, d = 1.0))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.5, b = 0.5, c = 0.5, d = 1.1))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.5, b = 0.2, c = 0.5, d = 1.1))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.5, b = 0.6, c = 0.5, d = 1.1))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.5, b = 0.2, c = 0.5, d = 1.1))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.3, b = 0.2, c = 0.5, d = 1.1))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.3, b = 0.2, c = 0.5, d = 1.3))
nls.control(minFactor = 1/1000000)
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.3, b = 0.2, c = 0.5, d = 1.3))
nls.control(minFactor = 1/10000000000)
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.3, b = 0.2, c = 0.5, d = 1.3))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.3, b = 0.2, c = 0.5, d = 1.3), minfactor=1/100000)
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.3, b = 20.0, c = 0.5, d = 1.3))
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.3, b = 1.0, c = 0.5, d = 1.3))
nls.control(maxiter = 50, tol = 1e-05, minFactor = 1/1000000, printEval=false, warnOnly=False)
nls.control(maxiter = 50, tol = 1e-05, minFactor = 1/1000000, printEval=FALSE, warnOnly=FALSE)
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.3, b = 1.0, c = 0.5, d = 1.3))
m <- nls(q~a*atan(d*(r-b))+c, start=list(a = 0.3, b = 1.0, c = 0.5, d = 1.3))
m <- nls(q~a*atan(d*(r-b))+c, start=list(a = 0.3, b = 0.5, c = 0.5, d = 1.3))
m <- nls(q~a*atan(d*(r-b))+c, start=list(a = 0.3, b = 0.5, c = 0.5, d = 0.1))
m <- nls(q~a*atan(d*(r-b))+c, start=list(a = 0.3, b = 0.5, c = 0.5, d = 0.1))
m <- nls(q~a*atan(d*(r-b))+c, start=list(a = 0.3, b = 0.5, c = 0.5, d = 2.0))
m <- nls(q~a*atan(d*(r-b))+c, start=list(a = 0.5, b = 0.5, c = 0.5, d = 2.0))
m <- nls(q~a*atan(d*(r-b))+c, start=list(a = 0.5, b = 0.5, c = 0.5, d = 2.0), algorithm='port')
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.5, b = 0.5, c = 0.5, d = 2.0), algorithm='port')
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.5, b = 0.5, c = 0.5, d = 1.0), algorithm='port')
m <- nls(q~a*atan(d*r-b)+c, start=list(a = 0.5, b = 0.5, c = 0.5, d = 1.0), algorithm='plinear')
q
r
m <- nls(q~a/(1+exp(d*r-b), start=list(a = 0.5, b = 0.5, c = 0.5, d = 1.0), algorithm='plinear')
m <- nls(q~a/(1+exp(d*r-b)), start=list(a = 0.5, b = 0.5, c = 0.5, d = 1.0), algorithm='plinear')
m <- nls(q~a/(1+exp(d*r-b)), start=list(a = 0.5, b = 0.5, c = 0.5, d = 1.0))
m <- nls(q~a/(1+exp(d*r-b)), start=list(a = 0.5, b = 0.5, c = 0.5, d = 1.1))
m <- nls(q~a/(1+exp(d*r-b)), start=list(a = 0.5, b = 0.5,  d = 1.1))
m <- nls(q~a/(1+exp(d*(r-b))), start=list(a = 0.5, b = 0.5, d = 1.1))
m <- nls(q~a/(1+exp(d*(r-b))), start=list(a = 0.5, b = 0.5, d = 0.9))
m <- nls(q~a/(1+exp(d*(r-b))), start=list(a = 1.0, b = 0.5, d = 0.9))
m <- nls(q~a/(1+exp(-d*(r-b))), start=list(a = 1.0, b = 0.5, d = 0.9))
summary(m)
plot(x,y)
q()
plot(x,y)
m = nls(q~a/(1+exp(-d*(r-b))), start=list(a = 1.0, b = 0.5, d = 0.9))
points(x,n$fitted.values, col='red', pch=4)
points(x,m$fitted.values, col='red', pch=4)
x
m
m(0.5)
m$fitted.values
plot(x, predict(fit))
plot(x, predict(m))
plot(x, predict(m))
plot(x, predict(m), col='red')
plot(x, y)
points(x, predict(m), col='red')
plot(q,r)
points(x, predict(m), col='red')
q()
