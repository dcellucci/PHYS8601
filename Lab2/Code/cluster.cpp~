#include <iostream>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include "r1279.cc"
#include "mt19937-64.c"

using namespace std;
const int STAGESIZE = 100;


int stage[STAGESIZE][STAGESIZE];
int groupkey[STAGESIZE*STAGESIZE/2];
int border[STAGESIZE*STAGESIZE/2][4];

int seed = 6750233;
int numclusters = 0;

int find_parent(int child){
  if(groupkey[child] > 0)
    return child;
  else if(groupkey[child] < 0)
    find_parent(-groupkey[child]);
  else
    return 0;
}

bool is_infinite(){
  bool inf = false;
  //*
  for(int i = 0; i < STAGESIZE*STAGESIZE/2; i++)
    for(int j = 0; j < 4; j++)
      border[i][j] = 0;
  for(int i = 0; i < STAGESIZE; i++){
    border[find_parent(stage[i][0])][0] = 1;
    border[find_parent(stage[STAGESIZE][i])][1] = 1;
    border[find_parent(stage[i][STAGESIZE])][2] = 1;
    border[find_parent(stage[0][i])][3] = 1;
  }

  for(int i = 1; i < STAGESIZE*STAGESIZE/2; i++){
    if(border[i][0]==1 && border[i][1]==1 && border[i][2]==1 && border[i][3]==1){
      inf = true; 
      //cout << "INFINITE\n------------\n";
    }
  }/*
  for(int j = 0; j < STAGESIZE; j++){
    for(int k= 0; k < STAGESIZE; k++){
      if(stage[j][k] != 0)
        printf("%2d  ",stage[j][k]);
      else
        cout<<"**  ";
    }
    cout <<"\n";
  }
  cout<<"\n\n";
  for(int i = 0; i < STAGESIZE*STAGESIZE/2; i++){ 
    if(border[i][0]==1 || border[i][1]==1 || border[i][2]==1 || border[i][3]==1){ 
      cout << i << "  ";
      for(int j = 0; j < 4; j++){
        printf("%2d  ",border[i][j]);
      }
    cout <<"\n";
    }
  }
  cout<<"\n\n";
  //*/
  /*
  while(!inf && k < STAGESIZE*STAGESIZE/2){
    for(int j = 0; j < 4; j++)
      border[k][j] = 0;
    if(groupkey[k] > 0){
      for(int i = 0; i < STAGESIZE; i++){
        if(find_parent(stage[i][0])==groupkey[k])
          border[k][0] = 1;
        if(find_parent(stage[STAGESIZE-1][i])==groupkey[k])
          border[k][1] = 1;
        if(find_parent(stage[i][STAGESIZE-1])==groupkey[k])
          border[k][2] = 1;
        if(find_parent(stage[0][i])==groupkey[k])
          border[k][3] = 1;
      }
    }
    if(border[k][0]==1&&border[k][1]==1&&border[k][2]==1&&border[k][3]==1)
      inf = true;
    k++;
  }//*/
  return inf;
}

void run_a_job(double ratio){
  int xrand, yrand,groupnum, bckleft, bcktop;
  //note groupnum is 1. 
  groupnum = 1;
  //emptying the stage
  for(int i = 0; i < STAGESIZE; i++){
    for(int j = 0; j < STAGESIZE; j++){
      if(genrand64_real2()<ratio)
        stage[i][j] = 1;
      else        
        stage[i][j] = 0;     
    }
  }

  //Now to check for clusters
  for(int i = 0; i < STAGESIZE; i++){
    for(int j = 0; j < STAGESIZE; j++){
      //only runs if there is something at (i,j)
      if(stage[i][j] != 0){
        //initial setup of temp variables,
        bckleft = 0;
        bcktop = 0;
        //checking if there are neighbors to assign 
        if(i > 0)
          bckleft = stage[i-1][j];
        if(j > 0)
          bcktop = stage[i][j-1];
        //i.e. if it is in the upper left corner or it is isolated 
        //in the top and left directions
        if(bckleft == 0 && bcktop == 0){
          //replacing the 1 with a group label
          stage[i][j] = groupnum;
          //indicating that this item is isolated in the group key
          groupkey[groupnum] = groupnum;
          //need a unique key for the next isolated item.
          groupnum++;
        }
        //since we know one of our neighbors is filled, we need to
        //check if one is empty. Since this checks if one is empty,
        //a simple sum will give us the nonzero group key value.
        else if(bckleft == 0 || bcktop == 0)
          stage[i][j] = bckleft+bcktop;
        //now to check if both neighbors are in the same cluster.
        else if(bckleft == bcktop)
          stage[i][j] = bckleft;
        //now here is the complicated part. What if there are two 
        //non-zero, inequal neighbors? First checking if the left is
        //less than the upper.
        else if(bckleft < bcktop){
          //we want to assign the lower of the two
          stage[i][j] = bckleft;
          if(bckleft < find_parent(bcktop))
            groupkey[find_parent(bcktop)] = -bckleft;
        }
        else if(bcktop < bckleft){
          stage[i][j] = bcktop;
          if(bcktop < find_parent(bckleft))
            groupkey[find_parent(bckleft)] = -bcktop;
        }
      }
    }
  }
}


int main(){
  unsigned long long seed2 = 31230293842;
  init_genrand64(seed2);
  ofstream myfile;
  stringstream stst;
  stst << STAGESIZE;
  string s = stst.str().append(".aout");
  myfile.open(s.c_str());

  //double rat = 0.59;
  for(double rat = 0.45; rat < 0.85; rat+=0.01){
    int count = 0;
    for(int i = 0; i < 1000; i++){
      run_a_job(rat);
      if(is_infinite()){
          count++;
      }
  }
  //cout<<rat <<" "<< 1.0*count/1000.0 << "\n";
  myfile<<rat <<" "<< 1.0*count/1000.0 << "\n";
  }
  myfile.close();
  return 0;
}


          /*
          bool looking = true;
          int tempdex = bcktop;
          //we also want to relabel the groupkey so that the larger
          //neighbor is reassigned to the smaller group as well.
          while(looking){
            //we want to keep going through the reference chain until
            //we reach a positive group assignment value.
            if(groupkey[tempdex] > 0){
              looking = false;
              if(bckleft < tempdex)
                groupkey[tempdex] = -bckleft;
              //we then assign the group key at this final value to be
              //the negative of the smaller, thus extending the call
              //chain by one link
            }
            //unless we hit 0 0 (we shouldn't), which means we have to
            //stop because we will hit an infinite loop.
            else if (groupkey[tempdex] == 0)
              looking = false;
            //if all else fails, that means the index reference is 
            //negative, and therefore we need to travel up the ref
            //tree in order to find the source
            else
              tempdex = -1*(int)groupkey[tempdex];
            
          }
          bool looking = true;
          int tempdex = bckleft;
          while(looking){
            if(groupkey[tempdex] > 0){
              looking = false;
              if(bcktop < tempdex)
                groupkey[tempdex] = -bcktop;
            }
            else if (groupkey[tempdex] == 0)
              looking = false;
            else
              tempdex = -1*(int)groupkey[tempdex];
          }
          
          //*/

